/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as RoomsIndexImport } from './routes/rooms/index'
import { Route as RoomsMakeImport } from './routes/rooms/make'
import { Route as RoomsRoomIDImport } from './routes/rooms/$roomID'
import { Route as RoomsRoomIDIndexImport } from './routes/rooms/$roomID/index'
import { Route as RoomsRoomIDStageImport } from './routes/rooms/$roomID/stage'
import { Route as RoomsRoomIDPlayImport } from './routes/rooms/$roomID/play'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RoomsIndexRoute = RoomsIndexImport.update({
  id: '/rooms/',
  path: '/rooms/',
  getParentRoute: () => rootRoute,
} as any)

const RoomsMakeRoute = RoomsMakeImport.update({
  id: '/rooms/make',
  path: '/rooms/make',
  getParentRoute: () => rootRoute,
} as any)

const RoomsRoomIDRoute = RoomsRoomIDImport.update({
  id: '/rooms/$roomID',
  path: '/rooms/$roomID',
  getParentRoute: () => rootRoute,
} as any)

const RoomsRoomIDIndexRoute = RoomsRoomIDIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RoomsRoomIDRoute,
} as any)

const RoomsRoomIDStageRoute = RoomsRoomIDStageImport.update({
  id: '/stage',
  path: '/stage',
  getParentRoute: () => RoomsRoomIDRoute,
} as any)

const RoomsRoomIDPlayRoute = RoomsRoomIDPlayImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => RoomsRoomIDRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/rooms/$roomID': {
      id: '/rooms/$roomID'
      path: '/rooms/$roomID'
      fullPath: '/rooms/$roomID'
      preLoaderRoute: typeof RoomsRoomIDImport
      parentRoute: typeof rootRoute
    }
    '/rooms/make': {
      id: '/rooms/make'
      path: '/rooms/make'
      fullPath: '/rooms/make'
      preLoaderRoute: typeof RoomsMakeImport
      parentRoute: typeof rootRoute
    }
    '/rooms/': {
      id: '/rooms/'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof RoomsIndexImport
      parentRoute: typeof rootRoute
    }
    '/rooms/$roomID/play': {
      id: '/rooms/$roomID/play'
      path: '/play'
      fullPath: '/rooms/$roomID/play'
      preLoaderRoute: typeof RoomsRoomIDPlayImport
      parentRoute: typeof RoomsRoomIDImport
    }
    '/rooms/$roomID/stage': {
      id: '/rooms/$roomID/stage'
      path: '/stage'
      fullPath: '/rooms/$roomID/stage'
      preLoaderRoute: typeof RoomsRoomIDStageImport
      parentRoute: typeof RoomsRoomIDImport
    }
    '/rooms/$roomID/': {
      id: '/rooms/$roomID/'
      path: '/'
      fullPath: '/rooms/$roomID/'
      preLoaderRoute: typeof RoomsRoomIDIndexImport
      parentRoute: typeof RoomsRoomIDImport
    }
  }
}

// Create and export the route tree

interface RoomsRoomIDRouteChildren {
  RoomsRoomIDPlayRoute: typeof RoomsRoomIDPlayRoute
  RoomsRoomIDStageRoute: typeof RoomsRoomIDStageRoute
  RoomsRoomIDIndexRoute: typeof RoomsRoomIDIndexRoute
}

const RoomsRoomIDRouteChildren: RoomsRoomIDRouteChildren = {
  RoomsRoomIDPlayRoute: RoomsRoomIDPlayRoute,
  RoomsRoomIDStageRoute: RoomsRoomIDStageRoute,
  RoomsRoomIDIndexRoute: RoomsRoomIDIndexRoute,
}

const RoomsRoomIDRouteWithChildren = RoomsRoomIDRoute._addFileChildren(
  RoomsRoomIDRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/rooms/$roomID': typeof RoomsRoomIDRouteWithChildren
  '/rooms/make': typeof RoomsMakeRoute
  '/rooms': typeof RoomsIndexRoute
  '/rooms/$roomID/play': typeof RoomsRoomIDPlayRoute
  '/rooms/$roomID/stage': typeof RoomsRoomIDStageRoute
  '/rooms/$roomID/': typeof RoomsRoomIDIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/rooms/make': typeof RoomsMakeRoute
  '/rooms': typeof RoomsIndexRoute
  '/rooms/$roomID/play': typeof RoomsRoomIDPlayRoute
  '/rooms/$roomID/stage': typeof RoomsRoomIDStageRoute
  '/rooms/$roomID': typeof RoomsRoomIDIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/rooms/$roomID': typeof RoomsRoomIDRouteWithChildren
  '/rooms/make': typeof RoomsMakeRoute
  '/rooms/': typeof RoomsIndexRoute
  '/rooms/$roomID/play': typeof RoomsRoomIDPlayRoute
  '/rooms/$roomID/stage': typeof RoomsRoomIDStageRoute
  '/rooms/$roomID/': typeof RoomsRoomIDIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/rooms/$roomID'
    | '/rooms/make'
    | '/rooms'
    | '/rooms/$roomID/play'
    | '/rooms/$roomID/stage'
    | '/rooms/$roomID/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/rooms/make'
    | '/rooms'
    | '/rooms/$roomID/play'
    | '/rooms/$roomID/stage'
    | '/rooms/$roomID'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/rooms/$roomID'
    | '/rooms/make'
    | '/rooms/'
    | '/rooms/$roomID/play'
    | '/rooms/$roomID/stage'
    | '/rooms/$roomID/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  RoomsRoomIDRoute: typeof RoomsRoomIDRouteWithChildren
  RoomsMakeRoute: typeof RoomsMakeRoute
  RoomsIndexRoute: typeof RoomsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  RoomsRoomIDRoute: RoomsRoomIDRouteWithChildren,
  RoomsMakeRoute: RoomsMakeRoute,
  RoomsIndexRoute: RoomsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/rooms/$roomID",
        "/rooms/make",
        "/rooms/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/rooms/$roomID": {
      "filePath": "rooms/$roomID.tsx",
      "children": [
        "/rooms/$roomID/play",
        "/rooms/$roomID/stage",
        "/rooms/$roomID/"
      ]
    },
    "/rooms/make": {
      "filePath": "rooms/make.tsx"
    },
    "/rooms/": {
      "filePath": "rooms/index.tsx"
    },
    "/rooms/$roomID/play": {
      "filePath": "rooms/$roomID/play.tsx",
      "parent": "/rooms/$roomID"
    },
    "/rooms/$roomID/stage": {
      "filePath": "rooms/$roomID/stage.tsx",
      "parent": "/rooms/$roomID"
    },
    "/rooms/$roomID/": {
      "filePath": "rooms/$roomID/index.tsx",
      "parent": "/rooms/$roomID"
    }
  }
}
ROUTE_MANIFEST_END */
